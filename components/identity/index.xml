<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Azure SaaS Dev Kit Docs – Identity Framework</title>
    <link>https://azure.github.io/azure-saas/components/identity/</link>
    <description>Recent content in Identity Framework on Azure SaaS Dev Kit Docs</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	  <atom:link href="https://azure.github.io/azure-saas/components/identity/index.xml" rel="self" type="application/rss+xml" />
    
    
      
        
      
    
    
    <item>
      <title>Components: Identity Provider</title>
      <link>https://azure.github.io/azure-saas/components/identity/identity-provider/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://azure.github.io/azure-saas/components/identity/identity-provider/</guid>
      <description>
        
        
        &lt;h2 id=&#34;overview&#34;&gt;Overview&lt;/h2&gt;
&lt;p&gt;For the identity framework, we chose to use  &lt;a href=&#34;https://docs.microsoft.com/en-us/azure/active-directory-b2c/overview&#34;&gt;Azure B2C&lt;/a&gt; as our default identity provider. If you&amp;rsquo;d like to use another identity provider such as Azure AAD or a different 3rd party tool, you can swap it out. We have a default configuration&lt;/p&gt;
&lt;h3 id=&#34;what-does-b2c-give-us&#34;&gt;What does B2C Give Us?&lt;/h3&gt;
&lt;p&gt;Azure Active Directory B2C provides business-to-customer identity as a service. It enables easily authenticate users to your application using their preferred identity provider, and is configurable to support a wide array of scenarios.&lt;/p&gt;
&lt;h3 id=&#34;configuration&#34;&gt;Configuration&lt;/h3&gt;
&lt;p&gt;B2C has two methods of configuring the business logic that users follow to gain access to your application: &lt;a href=&#34;https://docs.microsoft.com/en-us/azure/active-directory-b2c/user-flow-overview&#34;&gt;User Flows and Custom Policies&lt;/a&gt;. User Flows are predefined and are configured directly through the B2C Web Portal. Custom Policies are XML based configuration that is uploaded to the B2C tenant.&lt;/p&gt;
&lt;p&gt;The ASDK project uses Custom Policies to configure the B2C tenant. The XML configuration that gets deployed can be found under the &lt;a href=&#34;https://github.com/Azure/azure-saas/tree/main/src/Saas.Identity/Saas.IdentityProvider&#34;&gt;Saas.IdentityProvider&lt;/a&gt; folder within the repo, and you can read more about how to configure custom policies &lt;a href=&#34;https://docs.microsoft.com/en-us/azure/active-directory-b2c/user-flow-overview&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;When deploying the B2C Identity Provider via the instructions found in the &lt;a href=&#34;../../quick-start&#34;&gt;Quick Start&lt;/a&gt; guide, B2C is configured to do the following:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Provide a hosted SignIn and SignUp page that users can be directed to&lt;/li&gt;
&lt;li&gt;Reach out to the &lt;a href=&#34;../permissions-service&#34;&gt;SaaS.Permissions.Service&lt;/a&gt; upon a user signing in to fetch their application permissions and roles&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You can change/extend the behavior of B2C to do things like collect more information during signup, force users to enroll in Multi-Factor Authentication (MFA), and much more by modifying the custom policies.&lt;/p&gt;
&lt;h3 id=&#34;app-roles-and-global-admin&#34;&gt;App Roles and Global Admin&lt;/h3&gt;
&lt;p&gt;We are using &lt;a href=&#34;https://docs.microsoft.com/en-us/azure/active-directory/develop/howto-add-app-roles-in-azure-ad-apps&#34;&gt;App Roles&lt;/a&gt; to grant users &amp;ldquo;Global Admin&amp;rdquo; capabilites for the application. This App Role should only be granted to staff users that need it to administrate ALL the tenants across the entire SaaS solution. These roles are stored directly in B2C and are returned in the JWT token claims when the user signs in.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;How do I add a user to the default Global Admin role?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;If you followed our steps in the &lt;a href=&#34;../../quick-start&#34;&gt;Quick Start&lt;/a&gt;, the user that created the B2C tenant will automatically be added to this global admin role. Follow these steps if you&amp;rsquo;d like to add additional users:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Switch to your B2C Tenant in the Azure portal&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Navigate to the Azure Active Directory &lt;a href=&#34;https://portal.azure.com/#blade/Microsoft_AAD_IAM/ActiveDirectoryMenuBlade/Overview&#34;&gt;menu&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Click &amp;ldquo;Enterprise Applications&amp;rdquo;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Under the &amp;ldquo;Application Type&amp;rdquo; dropdown, select &amp;ldquo;All Applications&amp;rdquo; and click &amp;ldquo;Apply&amp;rdquo;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Select the &lt;code&gt;asdk-admin-api&lt;/code&gt; app &lt;img src=&#34;https://azure.github.io/azure-saas/azure-saas/images/aad-enterprise-apps.png&#34; alt=&#34;enterprise apps&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Select &amp;ldquo;Users and Groups&amp;rdquo; from the menu on the left&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Click &amp;ldquo;Add user/group&amp;rdquo; &lt;img src=&#34;https://azure.github.io/azure-saas/azure-saas/images/aad-enterprise-apps-users-groups.png&#34; alt=&#34;Add user/groups&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Select the users you&amp;rsquo;d like to add to the app role&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Click &amp;ldquo;Assign&amp;rdquo;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Repeat steps  5-9, but on the &lt;code&gt;asdk-b2c-web&lt;/code&gt; app instead&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;design-considerations-and-faq&#34;&gt;Design Considerations and FAQ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Q: Why did we choose b2c?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A: We chose B2C because, in additional to authenticating with &amp;ldquo;local&amp;rdquo; accounts, it can be easily extended to support a wide array of other identity providers such as Azure AD, Github, and many more. See the &lt;a href=&#34;https://docs.microsoft.com/en-us/azure/active-directory-b2c/add-identity-provider&#34;&gt;documentation&lt;/a&gt; for details.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Q: Why did we choose custom policies over user flows?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A: User Flows are predefined and meant for more basic use cases. Custom Policies provide more support for automating the setup and deployment of the B2C configuration, and generally provide greater extensibility in the long term for more complicated scenarios.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Q: Why didn&amp;rsquo;t we use App Roles for all permissions? Why did we choose to put the tenant permissions in a special API?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A: App roles in Azure AD B2C are nice, but too many of them get extremely complicated to manage. You can absolutely achieve the same thing using just app roles, but we wouldn&amp;rsquo;t reccomend it if you are going to have more than just a handful of tenants.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Components: SaaS.Permissions.Service</title>
      <link>https://azure.github.io/azure-saas/components/identity/permissions-service/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://azure.github.io/azure-saas/components/identity/permissions-service/</guid>
      <description>
        
        
        &lt;h2 id=&#34;running-locally&#34;&gt;Running Locally&lt;/h2&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;Instructions to get this module running on your local dev machine are located here: &lt;a href=&#34;https://github.com/Azure/azure-saas/tree/main/src/Saas.Identity&#34;&gt;https://github.com/Azure/azure-saas/tree/main/src/Saas.Identity&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The permissions service is an API that is responsible for CRUD operations on users permissions.&lt;/p&gt;
&lt;p&gt;The API uses Entity Framework to manage the SQL Server Connection and Schema.&lt;/p&gt;
&lt;h2 id=&#34;dependencies&#34;&gt;Dependencies:&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;SQL Server Database&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This API is restricted and can only be called by the following consumers:&lt;/p&gt;
&lt;h2 id=&#34;consumers&#34;&gt;Consumers&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Identity Provider (Azure AD B2C)&lt;/li&gt;
&lt;li&gt;Admin Service&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;authentication&#34;&gt;Authentication&lt;/h2&gt;
&lt;p&gt;This API is secured with&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/AzureAD/microsoft-identity-web/wiki/b2c-limitations&#34;&gt;https://github.com/AzureAD/microsoft-identity-web/wiki/b2c-limitations&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;data-storage&#34;&gt;Data Storage&lt;/h2&gt;
&lt;p&gt;Entity Framework Core is used to manage the database schema and connections.&lt;/p&gt;
&lt;h2 id=&#34;design-considerations&#34;&gt;Design Considerations&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Permissions are stored in the database in a single table (dbo.Permissions) with 3 pieces of data: Tenant ID, User ID (Email), and PermissionString. All 3 together make the row unique, ie you cannot have the same Permission for the same user on the same tenant more than once. Permissions are stored as a string (ex: Admin, User.Read, User.Write) for simplicity and extensibility. You may choose to store these in a database table and reference them by ID number if you have a large number of permissions and you want to enforce the types of permissions being assigned.&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Components: Identity Flows</title>
      <link>https://azure.github.io/azure-saas/components/identity/identity-flows/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://azure.github.io/azure-saas/components/identity/identity-flows/</guid>
      <description>
        
        
        &lt;h2 id=&#34;sign-up&#34;&gt;Sign Up&lt;/h2&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-mermaid&#34; data-lang=&#34;mermaid&#34;&gt;sequenceDiagram  
actor user as User 
participant frontend as Frontend Application
participant auth as Auth Service (B2C)


user-&amp;gt;&amp;gt;frontend : Register (/register)
frontend--&amp;gt;&amp;gt;user : Redirect to B2C Hosted Sign Up Page
user-&amp;gt;&amp;gt;auth : Sign Up Submitted
auth-&amp;gt;&amp;gt;auth : Create Account
auth--&amp;gt;&amp;gt;user : Redirect with JWT
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;sign-in&#34;&gt;Sign In&lt;/h2&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-mermaid&#34; data-lang=&#34;mermaid&#34;&gt;sequenceDiagram  
actor user as User
participant frontend as Frontend Application
participant auth as Auth Service (B2C)
participant perm as Permissions API


user-&amp;gt;&amp;gt;frontend : Login (/login)
frontend--&amp;gt;&amp;gt;user : Redirect to B2C Hosted Sign In Page
user-&amp;gt;&amp;gt;auth : Login Submitted
auth-&amp;gt;&amp;gt;perm : Get Permissions &amp;amp; Roles
perm--&amp;gt;&amp;gt;auth : Permissions &amp;amp; Roles
auth-&amp;gt;&amp;gt;auth : Add Custom Claims to JWT
auth--&amp;gt;&amp;gt;user : Redirect with JWT
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;add-permissions-record-generic&#34;&gt;Add Permissions Record (Generic)&lt;/h2&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-mermaid&#34; data-lang=&#34;mermaid&#34;&gt;sequenceDiagram
participant frontend as Frontend Application
participant admin as Admin API
participant perm as Permissions API

frontend-&amp;gt;&amp;gt;admin : Add Tenant Permission for User
admin-&amp;gt;&amp;gt;admin : Is Requestor Admin of Tenant?
admin-&amp;gt;&amp;gt;perm : Add Tenant Permission for User
perm-&amp;gt;&amp;gt;perm : Permission Added in DB
perm--&amp;gt;&amp;gt;admin : Ok
admin--&amp;gt;&amp;gt;frontend : Ok

&lt;/code&gt;&lt;/pre&gt;
      </description>
    </item>
    
    <item>
      <title>Components: Caveats &amp; Limitations</title>
      <link>https://azure.github.io/azure-saas/components/identity/caveats/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://azure.github.io/azure-saas/components/identity/caveats/</guid>
      <description>
        
        
        &lt;p&gt;&lt;strong&gt;Caveat&lt;/strong&gt;: This reference implementation does not provide support for per-tenant “local” users (i.e., all users will be accessing all tenants, there will be no landon@tenant1 vs landon@tenant2, it will be just &lt;a href=&#34;mailto:landon@email.com&#34;&gt;landon@email.com&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Caveat&lt;/strong&gt;: This version only supports “local” users and social identities and does not provide support for configuring federation with other Identity Providers.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Caveat&lt;/strong&gt;: Even if future versions provide support for configuring federation with additional Identity Providers (IdP), it will not provide support for “per-tenant federation” (i.e., where each tenant could bring their own IdP). This is primarily due to limitations in Azure AD B2C which make it additional work to manage “per-tenants” users/policies within a directory:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Each federation is configured via directory-wide policy and there is a limit of 200 policies on a directory.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Caveat&lt;/strong&gt;: If all tenants can be assumed to have their own Azure Active Directory (regular B2B), then per-tenant federation could be implemented using Azure AD (multitenant) federation identity provider with “application code” doing the authorization based on specific tenant id claim.&lt;/p&gt;
&lt;p&gt;However, if each tenant wants to be able to configure their own completely different IdP (e.g., Okta, Ping, Auth0, Cognito), it would require additional work due to policy limits.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Components: Identity Setup Instructions</title>
      <link>https://azure.github.io/azure-saas/components/identity/identity-setup/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://azure.github.io/azure-saas/components/identity/identity-setup/</guid>
      <description>
        
        
        
      </description>
    </item>
    
  </channel>
</rss>
